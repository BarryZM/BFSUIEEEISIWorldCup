# *- coding:utf-8 -*-

"""
 module for training model
"""

import sys
import random
import models
import file_utils as fu
from file_directions import corporation_index_second_stage_file_url, corporation_index_file_url

reload(sys)
sys.setdefaultencoding('utf-8')


def generate_random_test_corporates():
    """
    We separate the hole train data into test data(428)(we delete 8 because of lacking score) and train data(2528),
    so the test/train = 0.169 which is the final test(500) / train(2956) ratio.
    :return:
    """
    ran_list = random.sample(range(1001, 4001), 428)
    print(len(list(set(ran_list))))
    print (sorted(ran_list))


# generated by generate_random_test_corporates()
test_corporates = [1012, 1017, 1020, 1031, 1044, 1056, 1066, 1069, 1075, 1076, 1095, 1096, 1105, 1114, 1117, 1122, 1123,
                   1124, 1125, 1130, 1138, 1140, 1152, 1157, 1167, 1175, 1180, 1186, 1192, 1196, 1197, 1201, 1203,
                   1217, 1236, 1237, 1242, 1244, 1250, 1253, 1257, 1260, 1264, 1266, 1272, 1274, 1280, 1281, 1286, 1290,
                   1291, 1296, 1301, 1303, 1304, 1306, 1307, 1335, 1388, 1399, 1406, 1408, 1410, 1411, 1412, 1415, 1423,
                   1426, 1433, 1451, 1460, 1467, 1478, 1490, 1491, 1495, 1510, 1518, 1522, 1525, 1542, 1550, 1557, 1575,
                   1577, 1578, 1580, 1581, 1583, 1591, 1596, 1614, 1637, 1648, 1651, 1654, 1668, 1701, 1703, 1730,
                   1741, 1743, 1748, 1756, 1768, 1772, 1782, 1792, 1800, 1803, 1812, 1814, 1819, 1821, 1828, 1831, 1836,
                   1837, 1846, 1853, 1859, 1860, 1868, 1879, 1881, 1883, 1911, 1921, 1928, 1933, 1951, 1958, 1959,
                   1980, 1985, 1990, 2012, 2018, 2026, 2043, 2054, 2057, 2073, 2083, 2086, 2100, 2106, 2109, 2129,
                   2130, 2143, 2151, 2159, 2165, 2181, 2184, 2189, 2194, 2196, 2197, 2209, 2211, 2223, 2229, 2239, 2245,
                   2267, 2279, 2287, 2288, 2289, 2303, 2305, 2312, 2315, 2317, 2337, 2343, 2347, 2351, 2359, 2370, 2373,
                   2396, 2407, 2408, 2410, 2414, 2416, 2419, 2420, 2424, 2426, 2429, 2437, 2444, 2469, 2471, 2472, 2480,
                   2486, 2500, 2508, 2513, 2526, 2529, 2537, 2542, 2547, 2549, 2552, 2556, 2558, 2567, 2570, 2579,
                   2580, 2586, 2604, 2615, 2623, 2630, 2651, 2674, 2704, 2705, 2716, 2717, 2718, 2719, 2729, 2740, 2742,
                   2754, 2756, 2759, 2770, 2772, 2778, 2787, 2789, 2792, 2794, 2795, 2798, 2822, 2824, 2826, 2830, 2834,
                   2847, 2863, 2873, 2894, 2898, 2912, 2921, 2925, 2927, 2928, 2929, 2936, 2940, 2942, 2944, 2948,
                   2951, 2958, 2962, 2995, 2996, 3001, 3007, 3012, 3013, 3016, 3027, 3036, 3055, 3059, 3062, 3065, 3067,
                   3081, 3084, 3101, 3102, 3104, 3111, 3123, 3126, 3128, 3132, 3144, 3149, 3177, 3178, 3179, 3184,
                   3191, 3197, 3202, 3234, 3235, 3237, 3239, 3247, 3248, 3249, 3257, 3269, 3278, 3283, 3287, 3299, 3302,
                   3307, 3310, 3311, 3325, 3331, 3334, 3343, 3352, 3355, 3358, 3375, 3380, 3397, 3398, 3411, 3414, 3418,
                   3438, 3441, 3445, 3453, 3467, 3482, 3487, 3498, 3508, 3516, 3530, 3541, 3551, 3552, 3554, 3555,
                   3562, 3564, 3568, 3570, 3574, 3578, 3599, 3600, 3608, 3610, 3623, 3628, 3630, 3633, 3641, 3645, 3647,
                   3648, 3651, 3656, 3669, 3671, 3673, 3686, 3707, 3725, 3735, 3741, 3749, 3759, 3760, 3766, 3769, 3778,
                   3780, 3783, 3795, 3809, 3825, 3828, 3832, 3835, 3845, 3847, 3869, 3871, 3875, 3876, 3881, 3886, 3890,
                   3895, 3896, 3905, 3909, 3922, 3927, 3937, 3939, 3960, 3966, 3967, 3968, 3969, 3973, 3978, 3982, 3987,
                   3990, 3996, 3999]

#
# def generate_test_corporates():
#     data_frame = fu.read_file_to_df(corporation_index_second_stage_file_url, u'年报-企业基本信息_index')
#     corporates = list(data_frame['Unnamed: 0'])
#     ran_list = random.sample(range(0, 2956), 428)
#     test_cos = []
#     print(len(list(set(ran_list))))
#     print (sorted(ran_list))
#     for i in ran_list:
#         test_cos.append(corporates[i])
#     return test_cos
#
#
# test_corporates = generate_test_corporates()


def generate_dataframe():
    data_frames = []
    data_frame1 = fu.read_file_to_df(corporation_index_second_stage_file_url, u'资质认证_index')
    data_frames.append(data_frame1)
    data_frame2 = fu.read_file_to_df(corporation_index_second_stage_file_url, u'专利_index')
    data_frames.append(data_frame2)
    data_frame3 = fu.read_file_to_df(corporation_index_second_stage_file_url, u'作品著作权_index')
    data_frames.append(data_frame3)
    data_frame4 = fu.read_file_to_df(corporation_index_second_stage_file_url, u'软著著作权_index')
    data_frames.append(data_frame4)
    # data_frame5 = fu.read_file_to_df(corporation_index_second_stage_file_url, u'项目信息_index')
    # data_frames.append(data_frame5)
    # data_frame6 = fu.read_file_to_df(corporation_index_second_stage_file_url, u'产品_index')
    # data_frames.append(data_frame6)
    data_frame7 = fu.read_file_to_df(corporation_index_second_stage_file_url, u'商标_index')
    data_frames.append(data_frame7)

    # data_frame8 = fu.read_file_to_df(corporation_index_second_stage_file_url, u'年报-对外投资信息_index')
    # data_frames.append(data_frame8)
    # data_frame9 = fu.read_file_to_df(corporation_index_second_stage_file_url, u'年报-的对外提供保证担保信息_index')
    # data_frames.append(data_frame9)
    # data_frame10 = fu.read_file_to_df(corporation_index_second_stage_file_url, u'年报-社保信息_index')
    # data_frames.append(data_frame10)
    data_frame11 = fu.read_file_to_df(corporation_index_second_stage_file_url, u'年报-股东股权转让_index')
    data_frames.append(data_frame11)
    # data_frame12 = fu.read_file_to_df(corporation_index_second_stage_file_url, u'年报-股东（发起人）及出资信息_index')
    # data_frames.append(data_frame12)

    # data_frame13 = fu.read_file_to_df(corporation_index_file_url, u'上市信息财务信息-利润表_index')
    # data_frames.append(data_frame13)
    data_frame14 = fu.read_file_to_df(corporation_index_file_url, u'上市信息财务信息-成长能力指标_index')  # changed
    data_frames.append(data_frame14)
    # data_frame15 = fu.read_file_to_df(corporation_index_file_url, u'上市信息财务信息-财务风险指标_index')
    # data_frames.append(data_frame15)
    data_frame16 = fu.read_file_to_df(corporation_index_file_url, u'上市信息财务信息盈利能力指标_index')
    data_frames.append(data_frame16)
    # data_frame17 = fu.read_file_to_df(corporation_index_file_url, u'上市信息财务信息资产负债表_index')
    # data_frames.append(data_frame17)
    data_frame18 = fu.read_file_to_df(corporation_index_file_url, u'上市信息财务信息运营能力指标_index')
    data_frames.append(data_frame18)
    # data_frame19 = fu.read_file_to_df(corporation_index_file_url, u'上市公司财务信息-每股指标_index')
    # data_frames.append(data_frame19)

    # data_frame20 = fu.read_file_to_df(corporation_index_file_url, u'一般纳税人_index')
    # data_frames.append(data_frame20)
    # data_frame21 = fu.read_file_to_df(corporation_index_file_url, u'债券信息_index')
    # data_frames.append(data_frame21)
    # data_frame22 = fu.read_file_to_df(corporation_index_file_url, u'工商基本信息表_index')
    # data_frames.append(data_frame22)
    data_frame23 = fu.read_file_to_df(corporation_index_file_url, u'招投标_index')  # changed
    data_frames.append(data_frame23)
    # data_frame24 = fu.read_file_to_df(corporation_index_file_url, u'海关进出口信用_index')
    # data_frames.append(data_frame24)
    # data_frame25 = fu.read_file_to_df(corporation_index_file_url, u'竞品_index')
    # data_frames.append(data_frame25)
    # data_frame26 = fu.read_file_to_df(corporation_index_file_url, u'纳税A级年份_index')
    # data_frames.append(data_frame26)
    # data_frame27 = fu.read_file_to_df(corporation_index_file_url, u'融资信息_index')
    # data_frames.append(data_frame27)

    for i in range(0, len(data_frames)):
        print(i)
        data_frames[i] = data_frames[i].set_index('Unnamed: 0')
        if i > 0:
            try:
                data_frames[i] = data_frames[i].drop(columns=[u'企业总评分'.encode('utf-8'), 'int_score', 'int_score_root'])
            except KeyError, ke:
                print(ke)

    data_frame = data_frames[0]
    for i in range(1, len(data_frames)):
        data_frame = data_frame.join(data_frames[i])

    return data_frame


def get_data_set():
    data_frame = generate_dataframe()
    test_set = data_frame.loc[test_corporates]
    test_target = test_set[u'企业总评分'.encode('utf-8')].tolist()
    test_set = test_set.drop(columns=[u'企业总评分'.encode('utf-8'), 'int_score', 'int_score_root'])

    train_set = data_frame.drop(test_corporates)
    train_target = train_set['int_score']
    train_reg_target = train_set[u'企业总评分'.encode('utf-8')]
    train_set = train_set.drop(columns=[u'企业总评分'.encode('utf-8'), 'int_score', 'int_score_root'])

    return train_set, train_target, test_set, test_target, train_reg_target


def train_random_forest():
    train_set, train_target, test_set, test_target, train_reg_target = get_data_set()
    print('indexes count: ' + str(len(train_set.columns)))
    train_set, test_set, features = models.get_fitted_data_set(train_set, test_set)
    models.random_forest(train_set, train_target, test_set, test_target, features)


def train_random_forest_kneighbours_reg():
    train_set, train_target, test_set, test_target, train_reg_target = get_data_set()
    print('indexes count: ' + str(len(train_set.columns)))
    train_set, test_set, features = models.get_fitted_data_set(train_set, test_set)
    models.random_forest_kneighbours_reg(train_set, train_target, train_reg_target, test_set, test_target, features)


def train_random_forest_linear_reg():
    train_set, train_target, test_set, test_target, train_reg_target = get_data_set()
    print('indexes count: ' + str(len(train_set.columns)))
    train_set, test_set, features = models.get_fitted_data_set(train_set, test_set)
    models.random_forest_linear_reg(train_set, train_target, train_reg_target, test_set, test_target, features)


def train_xgboost():
    train_set, train_target, test_set, test_target, train_reg_target = get_data_set()
    print('indexes count: ' + str(len(train_set.columns)))
    train_set, test_set, features = models.get_fitted_data_set(train_set, test_set)
    models.xgboost(train_set, train_target, test_set, test_target, features)


def train_gradient_boosting():
    train_set, train_target, test_set, test_target, train_reg_target = get_data_set()
    train_set, test_set, features = models.get_fitted_data_set(train_set, test_set)
    models.gradient_boosting(train_set, train_target, test_set, test_target)


def train_linear_regress():
    train_set, train_target, test_set, test_target, train_reg_target = get_data_set()
    train_set, test_set, features = models.get_fitted_data_set(train_set, test_set)
    models.linear_regression(train_set, train_reg_target, test_set, test_target)


def train_logistic_regress():
    train_set, train_target, test_set, test_target, train_reg_target = get_data_set()
    train_set, test_set, features = models.get_fitted_data_set(train_set, test_set)
    models.logistic_regression(train_set, train_target, test_set, test_target)


def train_kneighbors():
    train_set, train_target, test_set, test_target, train_reg_target = get_data_set()
    train_set, test_set, features = models.get_fitted_data_set(train_set, test_set)
    models.kneighbors(train_set, train_target, test_set, test_target)


def train_kneighbors_regress():
    train_set, train_target, test_set, test_target, train_reg_target = get_data_set()
    train_set, test_set, features = models.get_fitted_data_set(train_set, test_set)
    models.kneighbors_reg(train_set, train_reg_target, test_set, test_target)


def train_decision_tree_regress():
    train_set, train_target, test_set, test_target, train_reg_target = get_data_set()
    train_set, test_set, features = models.get_fitted_data_set(train_set, test_set)
    models.decision_tree_reg(train_set, train_target, test_set, test_target)
