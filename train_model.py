# *- coding:utf-8 -*-

"""
 module for training model
"""

import sys
import random
import models
import xlsxwriter as xlsxwt
import file_utils as fu
from file_directions import corporation_index_second_stage_file_url, corporation_index_file_url, \
    corporation_index_second_stage_train_file_url, corporation_index_train_file_url, corporation_prediction_url, \
    test_start, test_end

reload(sys)
sys.setdefaultencoding('utf-8')


# def generate_random_test_corporates():
#     """
#     We separate the hole train data into test data(428)(we delete 8 because of lacking score) and train data(2528),
#     so the test/train = 0.169 which is the final test(500) / train(2956) ratio.
#     :return:
#     """
#     ran_list = random.sample(range(1001, 4001), 428)
#     print(len(list(set(ran_list))))
#     print (sorted(ran_list))
#
#
# # generated by generate_random_test_corporates()
# test_corporates = [1012, 1017, 1020, 1031, 1044, 1056, 1066, 1069, 1075, 1076, 1095, 1096, 1105, 1114, 1117, 1122, 1123,
#                    1124, 1125, 1130, 1138, 1140, 1152, 1157, 1167, 1175, 1180, 1186, 1192, 1196, 1197, 1201, 1203,
#                    1217, 1236, 1237, 1242, 1244, 1250, 1253, 1257, 1260, 1264, 1266, 1272, 1274, 1280, 1281, 1286, 1290,
#                    1291, 1296, 1301, 1303, 1304, 1306, 1307, 1335, 1388, 1399, 1406, 1408, 1410, 1411, 1412, 1415, 1423,
#                    1426, 1433, 1451, 1460, 1467, 1478, 1490, 1491, 1495, 1510, 1518, 1522, 1525, 1542, 1550, 1557, 1575,
#                    1577, 1578, 1580, 1581, 1583, 1591, 1596, 1614, 1637, 1648, 1651, 1654, 1668, 1701, 1703, 1730,
#                    1741, 1743, 1748, 1756, 1768, 1772, 1782, 1792, 1800, 1803, 1812, 1814, 1819, 1821, 1828, 1831, 1836,
#                    1837, 1846, 1853, 1859, 1860, 1868, 1879, 1881, 1883, 1911, 1921, 1928, 1933, 1951, 1958, 1959,
#                    1980, 1985, 1990, 2012, 2018, 2026, 2043, 2054, 2057, 2073, 2083, 2086, 2100, 2106, 2109, 2129,
#                    2130, 2143, 2151, 2159, 2165, 2181, 2184, 2189, 2194, 2196, 2197, 2209, 2211, 2223, 2229, 2239, 2245,
#                    2267, 2279, 2287, 2288, 2289, 2303, 2305, 2312, 2315, 2317, 2337, 2343, 2347, 2351, 2359, 2370, 2373,
#                    2396, 2407, 2408, 2410, 2414, 2416, 2419, 2420, 2424, 2426, 2429, 2437, 2444, 2469, 2471, 2472, 2480,
#                    2486, 2500, 2508, 2513, 2526, 2529, 2537, 2542, 2547, 2549, 2552, 2556, 2558, 2567, 2570, 2579,
#                    2580, 2586, 2604, 2615, 2623, 2630, 2651, 2674, 2704, 2705, 2716, 2717, 2718, 2719, 2729, 2740, 2742,
#                    2754, 2756, 2759, 2770, 2772, 2778, 2787, 2789, 2792, 2794, 2795, 2798, 2822, 2824, 2826, 2830, 2834,
#                    2847, 2863, 2873, 2894, 2898, 2912, 2921, 2925, 2927, 2928, 2929, 2936, 2940, 2942, 2944, 2948,
#                    2951, 2958, 2962, 2995, 2996, 3001, 3007, 3012, 3013, 3016, 3027, 3036, 3055, 3059, 3062, 3065, 3067,
#                    3081, 3084, 3101, 3102, 3104, 3111, 3123, 3126, 3128, 3132, 3144, 3149, 3177, 3178, 3179, 3184,
#                    3191, 3197, 3202, 3234, 3235, 3237, 3239, 3247, 3248, 3249, 3257, 3269, 3278, 3283, 3287, 3299, 3302,
#                    3307, 3310, 3311, 3325, 3331, 3334, 3343, 3352, 3355, 3358, 3375, 3380, 3397, 3398, 3411, 3414, 3418,
#                    3438, 3441, 3445, 3453, 3467, 3482, 3487, 3498, 3508, 3516, 3530, 3541, 3551, 3552, 3554, 3555,
#                    3562, 3564, 3568, 3570, 3574, 3578, 3599, 3600, 3608, 3610, 3623, 3628, 3630, 3633, 3641, 3645, 3647,
#                    3648, 3651, 3656, 3669, 3671, 3673, 3686, 3707, 3725, 3735, 3741, 3749, 3759, 3760, 3766, 3769, 3778,
#                    3780, 3783, 3795, 3809, 3825, 3828, 3832, 3835, 3845, 3847, 3869, 3871, 3875, 3876, 3881, 3886, 3890,
#                    3895, 3896, 3905, 3909, 3922, 3927, 3937, 3939, 3960, 3966, 3967, 3968, 3969, 3973, 3978, 3982, 3987,
#                    3990, 3996, 3999]

#
# def generate_test_corporates():
#     data_frame = fu.read_file_to_df(corporation_index_second_stage_file_url, u'年报-企业基本信息_index')
#     corporates = list(data_frame['Unnamed: 0'])
#     ran_list = random.sample(range(0, 2956), 428)
#     test_cos = []
#     print(len(list(set(ran_list))))
#     print (sorted(ran_list))
#     for i in ran_list:
#         test_cos.append(corporates[i])
#     return test_cos
#
#
# test_corporates = generate_test_corporates()


def generate_dataframe(index_second_stage_file_url, index_file_url):
    data_frames = []
    data_frame1 = fu.read_file_to_df(index_second_stage_file_url, u'资质认证_index')
    data_frames.append(data_frame1)
    data_frame2 = fu.read_file_to_df(index_second_stage_file_url, u'专利_index')
    data_frames.append(data_frame2)
    data_frame3 = fu.read_file_to_df(index_second_stage_file_url, u'作品著作权_index')
    data_frames.append(data_frame3)
    data_frame4 = fu.read_file_to_df(index_second_stage_file_url, u'软著著作权_index')
    data_frames.append(data_frame4)
    # data_frame5 = fu.read_file_to_df(corporation_index_second_stage_file_url, u'项目信息_index')
    # data_frames.append(data_frame5)
    # data_frame6 = fu.read_file_to_df(corporation_index_second_stage_file_url, u'产品_index')
    # data_frames.append(data_frame6)
    data_frame7 = fu.read_file_to_df(index_second_stage_file_url, u'商标_index')
    data_frames.append(data_frame7)

    # data_frame8 = fu.read_file_to_df(corporation_index_second_stage_file_url, u'年报-对外投资信息_index')
    # data_frames.append(data_frame8)
    # data_frame9 = fu.read_file_to_df(corporation_index_second_stage_file_url, u'年报-的对外提供保证担保信息_index')
    # data_frames.append(data_frame9)
    # data_frame10 = fu.read_file_to_df(corporation_index_second_stage_file_url, u'年报-社保信息_index')
    # data_frames.append(data_frame10)
    data_frame11 = fu.read_file_to_df(index_second_stage_file_url, u'年报-股东股权转让_index')
    data_frames.append(data_frame11)
    # data_frame12 = fu.read_file_to_df(corporation_index_second_stage_file_url, u'年报-股东（发起人）及出资信息_index')
    # data_frames.append(data_frame12)

    # data_frame13 = fu.read_file_to_df(corporation_index_file_url, u'上市信息财务信息-利润表_index')
    # data_frames.append(data_frame13)
    data_frame14 = fu.read_file_to_df(index_file_url, u'上市信息财务信息-成长能力指标_index')  # changed
    data_frames.append(data_frame14)
    # data_frame15 = fu.read_file_to_df(corporation_index_file_url, u'上市信息财务信息-财务风险指标_index')
    # data_frames.append(data_frame15)
    data_frame16 = fu.read_file_to_df(index_file_url, u'上市信息财务信息盈利能力指标_index')
    data_frames.append(data_frame16)
    # data_frame17 = fu.read_file_to_df(corporation_index_file_url, u'上市信息财务信息资产负债表_index')
    # data_frames.append(data_frame17)
    data_frame18 = fu.read_file_to_df(index_file_url, u'上市信息财务信息运营能力指标_index')
    data_frames.append(data_frame18)
    # data_frame19 = fu.read_file_to_df(corporation_index_file_url, u'上市公司财务信息-每股指标_index')
    # data_frames.append(data_frame19)

    # data_frame20 = fu.read_file_to_df(corporation_index_file_url, u'一般纳税人_index')
    # data_frames.append(data_frame20)
    # data_frame21 = fu.read_file_to_df(corporation_index_file_url, u'债券信息_index')
    # data_frames.append(data_frame21)
    # data_frame22 = fu.read_file_to_df(corporation_index_file_url, u'工商基本信息表_index')
    # data_frames.append(data_frame22)
    data_frame23 = fu.read_file_to_df(index_file_url, u'招投标_index')  # changed
    data_frames.append(data_frame23)
    # data_frame24 = fu.read_file_to_df(corporation_index_file_url, u'海关进出口信用_index')
    # data_frames.append(data_frame24)
    # data_frame25 = fu.read_file_to_df(corporation_index_file_url, u'竞品_index')
    # data_frames.append(data_frame25)
    # data_frame26 = fu.read_file_to_df(corporation_index_file_url, u'纳税A级年份_index')
    # data_frames.append(data_frame26)
    # data_frame27 = fu.read_file_to_df(corporation_index_file_url, u'融资信息_index')
    # data_frames.append(data_frame27)

    for i in range(0, len(data_frames)):
        print(i)
        data_frames[i] = data_frames[i].set_index('Unnamed: 0')
        if i > 0:
            try:
                data_frames[i] = data_frames[i].drop(columns=[u'企业总评分'.encode('utf-8'), 'int_score'])
                data_frames[i] = data_frames[i].drop(columns=['int_score_root'])
            except KeyError, ke:
                print(ke)

    data_frame = data_frames[0]
    for i in range(1, len(data_frames)):
        data_frame = data_frame.join(data_frames[i])

    return data_frame


def generate_train_dataframe():
    return generate_dataframe(corporation_index_second_stage_train_file_url, corporation_index_train_file_url)


def generate_test_dataframe():
    return generate_dataframe(corporation_index_second_stage_file_url, corporation_index_file_url)


#
# def get_data_set():
#     data_frame = generate_dataframe()
#     test_set = data_frame.loc[test_corporates]
#     test_target = test_set[u'企业总评分'.encode('utf-8')].tolist()
#     test_set = test_set.drop(columns=[u'企业总评分'.encode('utf-8'), 'int_score', 'int_score_root'])
#
#     train_set = data_frame.drop(test_corporates)
#     train_target = train_set['int_score']
#     train_reg_target = train_set[u'企业总评分'.encode('utf-8')]
#     train_set = train_set.drop(columns=[u'企业总评分'.encode('utf-8'), 'int_score', 'int_score_root'])
#
#     return train_set, train_target, test_set, test_target, train_reg_target


def get_data_set():
    test_set = generate_test_dataframe()

    train_set = generate_train_dataframe()
    train_target = train_set['int_score']
    train_reg_target = train_set[u'企业总评分'.encode('utf-8')]
    train_set = train_set.drop(columns=[u'企业总评分'.encode('utf-8'), 'int_score', 'int_score_root'])

    return train_set, train_target, test_set, None, train_reg_target


def train_random_forest():
    train_set, train_target, test_set, test_target, train_reg_target = get_data_set()
    print('indexes count: ' + str(len(train_set.columns)))
    train_set, test_set, features = models.get_fitted_data_set(train_set, test_set)
    models.random_forest(train_set, train_target, test_set, test_target, features)


def train_random_forest_kneighbours_reg():
    train_set, train_target, test_set, test_target, train_reg_target = get_data_set()
    print('indexes count: ' + str(len(train_set.columns)))
    train_set, test_set, features = models.get_fitted_data_set(train_set, test_set)
    models.random_forest_kneighbours_reg(train_set, train_target, train_reg_target, test_set, test_target, features)


def train_random_forest_random_forest():
    train_set, train_target, test_set, test_target, train_reg_target = get_data_set()
    corporations = range(test_start, test_end + 1)
    print('indexes count: ' + str(len(train_set.columns)))
    train_set, test_set, features = models.get_fitted_data_set(train_set, test_set)
    prediction = models.random_forest_random_forest(train_set, train_target, train_reg_target, test_set, test_target,
                                                    features)
    save_results(corporations, prediction)


def train_xgboost():
    train_set, train_target, test_set, test_target, train_reg_target = get_data_set()
    print('indexes count: ' + str(len(train_set.columns)))
    train_set, test_set, features = models.get_fitted_data_set(train_set, test_set)
    models.xgboost(train_set, train_target, test_set, test_target, features)


def train_gradient_boosting():
    train_set, train_target, test_set, test_target, train_reg_target = get_data_set()
    train_set, test_set, features = models.get_fitted_data_set(train_set, test_set)
    models.gradient_boosting(train_set, train_target, test_set, test_target)


def train_linear_regress():
    train_set, train_target, test_set, test_target, train_reg_target = get_data_set()
    train_set, test_set, features = models.get_fitted_data_set(train_set, test_set)
    models.linear_regression(train_set, train_reg_target, test_set, test_target)


def train_logistic_regress():
    train_set, train_target, test_set, test_target, train_reg_target = get_data_set()
    train_set, test_set, features = models.get_fitted_data_set(train_set, test_set)
    models.logistic_regression(train_set, train_target, test_set, test_target)


def train_kneighbors():
    train_set, train_target, test_set, test_target, train_reg_target = get_data_set()
    train_set, test_set, features = models.get_fitted_data_set(train_set, test_set)
    models.kneighbors(train_set, train_target, test_set, test_target)


def train_kneighbors_regress():
    train_set, train_target, test_set, test_target, train_reg_target = get_data_set()
    train_set, test_set, features = models.get_fitted_data_set(train_set, test_set)
    models.kneighbors_reg(train_set, train_reg_target, test_set, test_target)


def train_decision_tree_regress():
    train_set, train_target, test_set, test_target, train_reg_target = get_data_set()
    train_set, test_set, features = models.get_fitted_data_set(train_set, test_set)
    models.decision_tree_reg(train_set, train_target, test_set, test_target)


corporation_valid = [4001,
                     4002,
                     4003,
                     4004,
                     4005,
                     4006,
                     4007,
                     4008,
                     4009,
                     4010,
                     4011,
                     4012,
                     4013,
                     4014,
                     4015,
                     4016,
                     4017,
                     4018,
                     4019,
                     4020,
                     4021,
                     4022,
                     4023,
                     4024,
                     4025,
                     4026,
                     4027,
                     4028,
                     4029,
                     4030,
                     4031,
                     4032,
                     4033,
                     4034,
                     4035,
                     4036,
                     4037,
                     4038,
                     4039,
                     4040,
                     4041,
                     4042,
                     4043,
                     4044,
                     4045,
                     4046,
                     4047,
                     4048,
                     4049,
                     4050,
                     4051,
                     4052,
                     4053,
                     4054,
                     4055,
                     4056,
                     4057,
                     4058,
                     4059,
                     4060,
                     4061,
                     4062,
                     4063,
                     4064,
                     4065,
                     4066,
                     4067,
                     4068,
                     4069,
                     4070,
                     4071,
                     4072,
                     4073,
                     4074,
                     4075,
                     4076,
                     4077,
                     4078,
                     4079,
                     4080,
                     4081,
                     4082,
                     4083,
                     4084,
                     4085,
                     4086,
                     4087,
                     4088,
                     4089,
                     4090,
                     4091,
                     4092,
                     4093,
                     4094,
                     4095,
                     4096,
                     4097,
                     4098,
                     4099,
                     4100,
                     4101,
                     4102,
                     4103,
                     4104,
                     4105,
                     4106,
                     4107,
                     4108,
                     4109,
                     4110,
                     4111,
                     4112,
                     4113,
                     4114,
                     4115,
                     4116,
                     4117,
                     4118,
                     4119,
                     4120,
                     4121,
                     4122,
                     4123,
                     4124,
                     4125,
                     4126,
                     4127,
                     4128,
                     4129,
                     4130,
                     4131,
                     4132,
                     4134,
                     4135,
                     4136,
                     4137,
                     4138,
                     4139,
                     4140,
                     4141,
                     4142,
                     4143,
                     4144,
                     4145,
                     4146,
                     4147,
                     4148,
                     4149,
                     4150,
                     4151,
                     4152,
                     4153,
                     4154,
                     4155,
                     4156,
                     4157,
                     4158,
                     4159,
                     4160,
                     4161,
                     4162,
                     4163,
                     4164,
                     4165,
                     4166,
                     4167,
                     4168,
                     4169,
                     4170,
                     4171,
                     4172,
                     4173,
                     4174,
                     4176,
                     4177,
                     4178,
                     4179,
                     4180,
                     4182,
                     4183,
                     4184,
                     4185,
                     4186,
                     4187,
                     4188,
                     4189,
                     4190,
                     4191,
                     4192,
                     4193,
                     4194,
                     4195,
                     4196,
                     4197,
                     4198,
                     4199,
                     4200,
                     4201,
                     4202,
                     4203,
                     4204,
                     4205,
                     4206,
                     4207,
                     4208,
                     4209,
                     4210,
                     4211,
                     4212,
                     4213,
                     4215,
                     4216,
                     4217,
                     4218,
                     4219,
                     4220,
                     4221,
                     4222,
                     4223,
                     4224,
                     4225,
                     4226,
                     4227,
                     4228,
                     4229,
                     4230,
                     4231,
                     4232,
                     4233,
                     4234,
                     4235,
                     4236,
                     4237,
                     4238,
                     4239,
                     4240,
                     4241,
                     4242,
                     4243,
                     4244,
                     4245,
                     4246,
                     4247,
                     4248,
                     4249,
                     4250,
                     4251,
                     4252,
                     4253,
                     4254,
                     4255,
                     4256,
                     4257,
                     4258,
                     4259,
                     4260,
                     4261,
                     4262,
                     4263,
                     4264,
                     4265,
                     4266,
                     4267,
                     4268,
                     4269,
                     4270,
                     4271,
                     4272,
                     4273,
                     4274,
                     4275,
                     4276,
                     4277,
                     4278,
                     4279,
                     4280,
                     4281,
                     4282,
                     4283,
                     4284,
                     4285,
                     4286,
                     4287,
                     4288,
                     4289,
                     4290,
                     4291,
                     4292,
                     4293,
                     4294,
                     4295,
                     4296,
                     4297,
                     4298,
                     4299,
                     4300,
                     4301,
                     4302,
                     4303,
                     4304,
                     4305,
                     4306,
                     4307,
                     4308,
                     4309,
                     4310,
                     4311,
                     4312,
                     4313,
                     4314,
                     4315,
                     4316,
                     4317,
                     4318,
                     4319,
                     4320,
                     4321,
                     4322,
                     4323,
                     4324,
                     4325,
                     4326,
                     4327,
                     4328,
                     4329,
                     4330,
                     4331,
                     4332,
                     4333,
                     4334,
                     4335,
                     4336,
                     4337,
                     4338,
                     4339,
                     4340,
                     4341,
                     4342,
                     4343,
                     4344,
                     4345,
                     4346,
                     4347,
                     4348,
                     4349,
                     4350,
                     4351,
                     4352,
                     4353,
                     4354,
                     4355,
                     4356,
                     4357,
                     4358,
                     4359,
                     4360,
                     4361,
                     4362,
                     4363,
                     4364,
                     4365,
                     4366,
                     4367,
                     4368,
                     4369,
                     4370,
                     4371,
                     4372,
                     4373,
                     4374,
                     4375,
                     4376,
                     4377,
                     4378,
                     4379,
                     4380,
                     4381,
                     4382,
                     4383,
                     4384,
                     4385,
                     4386,
                     4387,
                     4388,
                     4389,
                     4390,
                     4391,
                     4392,
                     4393,
                     4394,
                     4395,
                     4396,
                     4397,
                     4398,
                     4399,
                     4401,
                     4402,
                     4403,
                     4404,
                     4405,
                     4406,
                     4407,
                     4408,
                     4409,
                     4410,
                     4411,
                     4412,
                     4413,
                     4414,
                     4415,
                     4416,
                     4417,
                     4418,
                     4419,
                     4420,
                     4421,
                     4422,
                     4423,
                     4424,
                     4425,
                     4426,
                     4427,
                     4428,
                     4429,
                     4430,
                     4431,
                     4432,
                     4433,
                     4434,
                     4435,
                     4436,
                     4437,
                     4438,
                     4439,
                     4440,
                     4441,
                     4442,
                     4443,
                     4444,
                     4445,
                     4446,
                     4447,
                     4448,
                     4449,
                     4450,
                     4451,
                     4452,
                     4453,
                     4454,
                     4455,
                     4456,
                     4457,
                     4458,
                     4459,
                     4460,
                     4461,
                     4462,
                     4463,
                     4464,
                     4465,
                     4466,
                     4467,
                     4468,
                     4469,
                     4470,
                     4471,
                     4472,
                     4473,
                     4474,
                     4475,
                     4476,
                     4477,
                     4478,
                     4479,
                     4480,
                     4481,
                     4482,
                     4483,
                     4484,
                     4485,
                     4486,
                     4487,
                     4488,
                     4489,
                     4490,
                     4491,
                     4492,
                     4493,
                     4494,
                     4495,
                     4496,
                     4497,
                     4498,
                     4499,
                     4500,
                     4501,
                     4502,
                     4503,
                     4504,
                     4505,
                     4506,
                     4507,
                     4508,
                     4509,
                     4510,
                     4511,
                     4512,
                     4513,
                     4514,
                     4515,
                     4516,
                     4517,
                     4518,
                     4519,
                     4520,
                     4521,
                     4522,
                     4523,
                     4524,
                     4525]


def save_results(corporations, prediction):
    wb = xlsxwt.Workbook(corporation_prediction_url + u'赛题1结果_Infinity.xlsx')
    ws = wb.add_worksheet('Sheet')

    print ('corporations num: ' + str(len(corporations)))
    print ('prediction num: ' + str(len(prediction)))
    index_row = 0
    for index in range(0, len(corporations)):
        if not corporations[index] in corporation_valid:
            continue

        ws.write(index_row, 0, corporations[index])
        ws.write(index_row, 1, prediction[index])
        index_row += 1
    wb.close()
